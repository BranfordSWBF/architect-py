# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, AsyncIterator, Dict

from .async_base_client import AsyncBaseClient
from .balances_for_cpty import BalancesForCpty
from .input_types import CreateOrder
from .open_orders_from_oms import OpenOrdersFromOms
from .send_order import SendOrder
from .trades_for_market import TradesForMarket


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def balances_for_cpty(
        self, venue: Any, route: Any, **kwargs: Any
    ) -> BalancesForCpty:
        query = gql(
            """
            query BalancesForCpty($venue: VenueId!, $route: RouteId!) {
              balancesForCpty(venue: $venue, route: $route) {
                snapshotTs
                product {
                  name
                }
                amount
              }
            }
            """
        )
        variables: Dict[str, object] = {"venue": venue, "route": route}
        response = await self.execute(
            query=query, operation_name="BalancesForCpty", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return BalancesForCpty.model_validate(data)

    async def open_orders_from_oms(self, **kwargs: Any) -> OpenOrdersFromOms:
        query = gql(
            """
            query OpenOrdersFromOms {
              openOrders {
                timestamp
                order {
                  id
                  market {
                    id
                    name
                  }
                  dir
                  quantity
                }
                orderState
                filledQty
                avgFillPrice
                rejectReason
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query,
            operation_name="OpenOrdersFromOms",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return OpenOrdersFromOms.model_validate(data)

    async def send_order(self, order: CreateOrder, **kwargs: Any) -> SendOrder:
        query = gql(
            """
            mutation SendOrder($order: CreateOrder!) {
              createOrder(order: $order)
            }
            """
        )
        variables: Dict[str, object] = {"order": order}
        response = await self.execute(
            query=query, operation_name="SendOrder", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SendOrder.model_validate(data)

    async def trades_for_market(
        self, market: Any, **kwargs: Any
    ) -> AsyncIterator[TradesForMarket]:
        query = gql(
            """
            subscription TradesForMarket($market: MarketId!) {
              trades(market: $market) {
                time
                price
                size
                direction
              }
            }
            """
        )
        variables: Dict[str, object] = {"market": market}
        async for data in self.execute_ws(
            query=query, operation_name="TradesForMarket", variables=variables, **kwargs
        ):
            yield TradesForMarket.model_validate(data)
